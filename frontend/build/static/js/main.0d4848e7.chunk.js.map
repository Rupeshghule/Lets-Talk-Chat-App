{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","fontWeight","bg","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","variant","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","fontSize","color","textShadow","_hover","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","boxShadow","w","m","borderRadius","borderWidth","Text","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","getSender","loggedUser","users","_users$","_id","isSameSenderMargin","messages","i","userId","length","sender","isSameSender","isLastMessage","isSameUser","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","display","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.0d4848e7.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n       \n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          fontWeight=\"700\"\n          bg=\"rgba(\t2,0,100, 0.4)\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            fontWeight=\"700\"\n            bg=\"rgba(\t2,0,100, 0.4)\"\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        variant='ghost'\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n        fontSize='21px'\n        color=\"rgb(2,0,100)\"\n        textShadow=\"3px 3px 10px skyblue\"\n        _hover={{bg:\"skyblue\"}}\n      >\n        Login\n      </Button>\n      {/* <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User \n      </Button> */}\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(\"data\",data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          bg=\"rgba(\t2,0,100, 0.4)\"\n          fontWeight=\"700\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          bg=\"rgba(\t2,0,100, 0.4)\"\n          fontWeight=\"700\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n           bg=\"rgba(\t2,0,100, 0.4)\"\n           fontWeight=\"700\"\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n           bg=\"rgba(\t2,0,100, 0.4)\"\n           fontWeight=\"700\"\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel >Upload your Picture</FormLabel>\n        <Input\n        bg=\"rgba(\t2,0,100, 0.4)\"\n        fontWeight=\"700\" \n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        variant='ghost'\n        fontSize='21px'\n        color=\"rgb(2,0,100)\"\n        textShadow=\"3px 3px 10px skyblue\"\n        _hover={{bg:\"skyblue\"}}\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"rgba(255, 255, 255, 0.2)\"\n        boxShadow=\"0px 0px 10px black\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"0px\"\n        color=\"white\"\n        fontWeight=\"900\"\n        textShadow='1px 1px 8px black'\n\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Let's Talk\n        </Text>\n      </Box>\n      <Box bg=\"rgba(255, 255, 255, 0.2)\"\n        boxShadow=\"0px 0px 10px black\"\n        w=\"100%\"\n        p={4}\n        borderRadius=\"lg\"\n        borderWidth=\"0px\"\n        textShadow='1px 1px 8px white'>\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\" >\n            <Tab color=\"white\" textShadow='2px 2px 8px black'\n            >Login</Tab>\n            <Tab color=\"white\" textShadow='2px 2px 8px black'\n            >Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton display={{ base: \"flex\" }} color=\"black\" icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            display=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n            \n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose} bg=\"skyblue\">Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"skyblue\" : \"#cc99ff\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"15px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({user, handleFunction }) => {\n  \n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { white } from \"colors\";\n\n\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              color=\"black\"\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n            bg=\"rgba(255, 255, 255,0)\"\n            boxShadow=\"0px 0px 10px black\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                color=\"white\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n\n          display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { white } from \"colors\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"0px\"\n      bg=\"rgba(255, 255, 255, 0.2)\"\n      boxShadow=\"0px 0px 10px black\"\n      fontWeight=\"600\"\n      color=\"white\"\n      textShadow=\"2px 2px 10px black\"\n\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n    \n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      bg=\"rgba(255, 255, 255, 0.2)\"\n      boxShadow=\"0px 0px 10px black\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"rgba(255, 255, 255, 0.2)\"\n        boxShadow=\"0px 0px 10px black\"\n        borderRadius=\"10px\"\n        margin=\"5px\"\n        p=\"5px\"\n        color=\"white\"\n        fontWeight=\"600\"\n        textShadow='1px 1px 8px black'\n\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            display=\"flex\" color=\"black\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"rgba(255, 255, 255, 0.2)\"\n        boxShadow=\"0px 0px 10px black\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n                \n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"0.5px\"\n        bg=\"rgba(255, 255, 255, 0.2)\"\n        boxShadow=\"0px 0px 10px black\"\n        color=\"white\"\n        fontWeight=\"900\"\n        textShadow='1px 1px 8px black'\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text display={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Let's Talk\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2} color=\"black\">\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"transparent\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList bg=\"rgba(0,0,0,0.6)\">\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer \n         placement=\"left\" onClose={onClose} isOpen={isOpen} >\n        <DrawerOverlay />\n        <DrawerContent bg=\"rgba(255, 255, 255,0.9)\"\n        boxShadow=\"0px 0px 10px black\">\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box display=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading/>\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// index.js - Client-Side\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}